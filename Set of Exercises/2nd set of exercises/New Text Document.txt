

class Player {
 public:
    Player(const string &n){
        onoma=n;
    };
    virtual ~Player(){
        onoma.clear();
    };


    virtual const string & getType() const = 0;
    virtual Move play(const State &s) = 0;

    friend ostream & operator << (ostream &out, const Player &player);

 protected:
    string onoma;
};

class GreedyPlayer : public Player {
public:
    GreedyPlayer(const string &n) : Player(n) {
        typeplayer = "Greedy";
    }
    virtual const string & getType() const override {
        return typeplayer;
    }

    virtual Move play(const State &s) override {
        int source_heap = 0;
        int source_coins = 0;
        for (int i=0; i<s.getHeaps() ; i++) {
            if ( s.getCoins(i) > source_coins) {
                source_heap = i;
                source_coins = s.getCoins(i);
            }
        }
        Move GreedyObject(source_heap, source_coins, 0, 0);
        return GreedyObject;
    }
private:
    string typeplayer;
};

class SpartanPlayer : public Player{
    SpartanPlayer (const string &n): Player(n){
        typeplayer="Spartan";
    }
    virtual const string & getType() const override{//kathe fora
        return typeplayer;//pou kalei tin gettype theloume na akolouthei afto
    }
    virtual Move play(const State &s) override{
        int heapa=0,coinsa=0;
        for(int i=0;i<s.getHeaps();i++){
            if(s.getCoins(i)>coinsa){
                heapa=i;
                coinsa=s.getCoins(i);
            }
        }
        Move SpartanObject(heapa,1,0,0);
        return SpartanObject;
    }
private:
    string typeplayer;
};

class SneakyPlayer : public Player{
 public:
    SneakyPlayer (const string &n): Player(n){
        typeplayer="Sneaky";
    }
    virtual const string & getType() const override{
        return typeplayer;
    }
    virtual Move play(const State &s) override{
        int heapa=0,coinsa=s.getCoins(0);
        for(int i=1;i<s.getHeaps();i++){
            if(s.getCoins(i)<coinsa){
                heapa=i;
                coinsa=s.getCoins(i);
            }
        }
        Move SneakyObject(heapa,coinsa, 0 , 0);
        return SneakyObject;
    }

 private:
    string typeplayer;
};
class RighteousPlayer : public Player{
public:
    RighteousPlayer(const string &n): Player (n){
        typeplayer="Righteous";
    }
    virtual const string & getType() const override{
        return typeplayer;
    }
    virtual Move play(const State &s) override{
        int heapb = 0,heapa = 0;//apo to heap(alpha) sto heap(beta)
        int coinsa = s.getCoins(0),coinsb = coinsa;//o logos pou vazo dio metavlites einai epd
        //thelw na vro to min kai max heap me ta nomismata pou exei

        for (int i=1; i < s.getHeaps(); i++) {
            if ( s.getCoins(i) > coinsa) {
                heapa = i;
                coinsa = s.getCoins(i);
            }
            else if ( s.getCoins(i) < coinsb) {
                heapb = i;
                coinsb = s.getCoins(i);
            }
        }
        coinsa /=2;//afou thelei na asxolithei me ta misa
        Move RighteousObject(heapa, coinsa, heapb, coinsa - 1);
        return RighteousObject;

    }
private:
    string typeplayer;
};

ostream & operator << (ostream &out, const Player &player){
    out<<player.getType()<<" player "<<player.onoma;
    return out;
}
